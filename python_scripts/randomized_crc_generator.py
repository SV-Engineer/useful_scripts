# NOTE: I asked CHAT GPT to create this and made minor tweaks for my use case.
#       this is a solved problem so why reinvent the wheel?

import random

# Polynomial for CRC-8 (x^8 + x^2 + x + 1) -> 0x07
CRC_POLYNOMIAL = 0x07
CRC_INITIAL    = 0x02  # Initial CRC value
NUM_BYTES      = 100

def crc8(data: bytearray) -> int:
    crc = CRC_INITIAL
    for byte in data:
        crc ^= byte  # XOR the byte with the current CRC value
        for _ in range(8):  # Process each bit in the byte
            if crc & 0x80:  # If the leftmost bit is 1
                crc = (crc << 1) ^ CRC_POLYNOMIAL  # Shift left and XOR with polynomial
            else:
                crc <<= 1  # Just shift left
            crc &= 0xFF  # Ensure CRC is always 8 bits (mask with 0xFF)
    return crc

def generate_random_bytes(seed: int, length: int) -> bytearray:
    random.seed(seed)
    return bytearray(random.getrandbits(8) for _ in range(length))

# Generate a random byte array with seed 2 and a length of NUM_BYTES bytes
random_bytes = generate_random_bytes(2, NUM_BYTES)
print(f"Generated bytes: {list(random_bytes)}")

# Calculate the CRC-8 of the generated random byte array
crc_value = crc8(random_bytes)
print(f"CRC-8 value: {crc_value:#02x}")
